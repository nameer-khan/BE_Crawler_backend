# Generated by Django 4.2.7 on 2025-08-21 21:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (not soft deleted)', verbose_name='Is Active')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the record', max_length=20, verbose_name='Status')),
                ('domain', models.CharField(help_text='Website domain (e.g., example.com)', max_length=255, unique=True, verbose_name='Domain')),
                ('name', models.CharField(blank=True, help_text='Website name (optional, defaults to domain)', max_length=255, null=True, verbose_name='Name')),
                ('robots_txt_url', models.URLField(blank=True, help_text='URL to the robots.txt file', null=True, verbose_name='Robots.txt URL')),
                ('crawl_delay', models.PositiveIntegerField(default=1, help_text='Delay between requests in seconds', verbose_name='Crawl Delay')),
                ('last_crawled', models.DateTimeField(blank=True, help_text='When this website was last crawled', null=True, verbose_name='Last Crawled')),
                ('total_pages', models.PositiveIntegerField(default=0, help_text='Total number of pages crawled from this website', verbose_name='Total Pages')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Website',
                'verbose_name_plural': 'Websites',
                'db_table': 'websites',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (not soft deleted)', verbose_name='Is Active')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the record', max_length=20, verbose_name='Status')),
                ('name', models.CharField(help_text='Name of the record', max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='URL-friendly topic identifier', max_length=255, unique=True, verbose_name='Slug')),
                ('keywords', models.JSONField(blank=True, default=list, help_text='Keywords associated with this topic', verbose_name='Keywords')),
                ('page_count', models.PositiveIntegerField(default=0, help_text='Number of pages tagged with this topic', verbose_name='Page Count')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent topic if this is a subtopic', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='crawler.topic', verbose_name='Parent Topic')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'db_table': 'topics',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CrawlJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (not soft deleted)', verbose_name='Is Active')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the record', max_length=20, verbose_name='Status')),
                ('name', models.CharField(help_text='Name of the record', max_length=255, verbose_name='Name')),
                ('total_urls', models.PositiveIntegerField(default=0, help_text='Total number of URLs to crawl', verbose_name='Total URLs')),
                ('completed_urls', models.PositiveIntegerField(default=0, help_text='Number of successfully crawled URLs', verbose_name='Completed URLs')),
                ('failed_urls', models.PositiveIntegerField(default=0, help_text='Number of failed URLs', verbose_name='Failed URLs')),
                ('progress', models.FloatField(default=0.0, help_text='Job progress percentage', verbose_name='Progress')),
                ('batch_size', models.PositiveIntegerField(default=10, help_text='Number of URLs to process in each batch', verbose_name='Batch Size')),
                ('urls_list', models.JSONField(blank=True, default=list, help_text='List of URLs to crawl', verbose_name='URLs List')),
                ('urls_file', models.FileField(blank=True, help_text='File containing URLs to crawl', null=True, upload_to='crawl_jobs/', verbose_name='URLs File')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the job started', null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the job completed', null=True, verbose_name='Completed At')),
                ('job_status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current job status', max_length=20, verbose_name='Job Status')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Crawl Job',
                'verbose_name_plural': 'Crawl Jobs',
                'db_table': 'crawl_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CrawledPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (not soft deleted)', verbose_name='Is Active')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the record', max_length=20, verbose_name='Status')),
                ('url', models.URLField(help_text='The URL that was crawled', max_length=2048, unique=True, verbose_name='URL')),
                ('title', models.CharField(blank=True, help_text='Page title', max_length=500, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='Page description/meta description', null=True, verbose_name='Description')),
                ('keywords', models.TextField(blank=True, help_text='Page keywords/meta keywords', null=True, verbose_name='Keywords')),
                ('author', models.CharField(blank=True, help_text='Page author', max_length=255, null=True, verbose_name='Author')),
                ('language', models.CharField(blank=True, help_text='Page language code', max_length=10, null=True, verbose_name='Language')),
                ('content', models.TextField(blank=True, help_text='Full HTML content', null=True, verbose_name='Content')),
                ('text_content', models.TextField(blank=True, help_text='Extracted text content', null=True, verbose_name='Text Content')),
                ('status_code', models.IntegerField(blank=True, help_text='HTTP status code', null=True, verbose_name='Status Code')),
                ('content_type', models.CharField(blank=True, help_text='HTTP content type', max_length=100, null=True, verbose_name='Content Type')),
                ('content_length', models.BigIntegerField(blank=True, help_text='Content length in bytes', null=True, verbose_name='Content Length')),
                ('encoding', models.CharField(blank=True, help_text='Content encoding', max_length=50, null=True, verbose_name='Encoding')),
                ('headers', models.JSONField(blank=True, default=dict, help_text='HTTP response headers', verbose_name='Headers')),
                ('crawl_status', models.CharField(choices=[('pending', 'Pending'), ('crawling', 'Crawling'), ('completed', 'Completed'), ('failed', 'Failed'), ('blocked', 'Blocked')], default='pending', help_text='Current crawling status', max_length=20, verbose_name='Crawl Status')),
                ('error_message', models.TextField(blank=True, help_text='Error message if crawling failed', null=True, verbose_name='Error Message')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts', verbose_name='Retry Count')),
                ('crawled_at', models.DateTimeField(blank=True, help_text='When this page was last crawled', null=True, verbose_name='Crawled At')),
                ('topics', models.JSONField(blank=True, default=list, help_text='Identified topics for this page', verbose_name='Topics')),
                ('category', models.CharField(blank=True, help_text='Page category', max_length=100, null=True, verbose_name='Category')),
                ('sentiment', models.CharField(blank=True, help_text='Content sentiment analysis', max_length=20, null=True, verbose_name='Sentiment')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('website', models.ForeignKey(help_text='Website this page belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='crawler.website', verbose_name='Website')),
            ],
            options={
                'verbose_name': 'Crawled Page',
                'verbose_name_plural': 'Crawled Pages',
                'db_table': 'crawled_pages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PageTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated', verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this record is active (not soft deleted)', verbose_name='Is Active')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True, verbose_name='Deleted At')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the record', max_length=20, verbose_name='Status')),
                ('confidence', models.FloatField(default=1.0, help_text='Confidence score for this topic assignment', verbose_name='Confidence')),
                ('source', models.CharField(default='automatic', help_text='Source of topic assignment (automatic/manual)', max_length=50, verbose_name='Source')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('page', models.ForeignKey(help_text='Crawled page', on_delete=django.db.models.deletion.CASCADE, related_name='page_topics', to='crawler.crawledpage', verbose_name='Page')),
                ('topic', models.ForeignKey(help_text='Topic', on_delete=django.db.models.deletion.CASCADE, related_name='page_topics', to='crawler.topic', verbose_name='Topic')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Page Topic',
                'verbose_name_plural': 'Page Topics',
                'db_table': 'page_topics',
                'ordering': ['-confidence'],
                'unique_together': {('page', 'topic')},
            },
        ),
        migrations.AddIndex(
            model_name='crawledpage',
            index=models.Index(fields=['crawl_status'], name='crawled_pag_crawl_s_4bb1c3_idx'),
        ),
        migrations.AddIndex(
            model_name='crawledpage',
            index=models.Index(fields=['website'], name='crawled_pag_website_09fbbb_idx'),
        ),
        migrations.AddIndex(
            model_name='crawledpage',
            index=models.Index(fields=['created_at'], name='crawled_pag_created_ca5eb3_idx'),
        ),
        migrations.AddIndex(
            model_name='crawledpage',
            index=models.Index(fields=['crawled_at'], name='crawled_pag_crawled_c9a943_idx'),
        ),
        migrations.AddIndex(
            model_name='crawledpage',
            index=models.Index(fields=['is_active'], name='crawled_pag_is_acti_97b6fc_idx'),
        ),
    ]
